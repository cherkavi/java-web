package com.cherkashyn.vitalii.bpmnui.core.bpm.validator;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import javax.xml.bind.ValidationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import java.io.File;
import java.io.IOException;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class XmlValidator {

    public static void main(String[] args) {

    }

    public static Document read(File file) throws ParserConfigurationException, IOException, SAXException {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setValidating(false);
        DocumentBuilder db = dbf.newDocumentBuilder();
        db.setEntityResolver(new EntityResolver() {
            @Override
            public InputSource resolveEntity(String publicId, String systemId)
                    throws SAXException, IOException {
                return null;
//                if (systemId.contains("foo.dtd")) {
//                    return new InputSource(new StringReader(""));
//                } else {
//                    return null;
//                }
            }
        });
        return db.parse(file);
    }

    public static NodeList readAllUserTasks(Document document){
        return XmlValidator.getNodeList(document, "//userTask");
    }
    public static Node readProcess(Document document) {
        NodeList nodeList = XmlValidator.getNodeList(document, "//process");
        if(nodeList==null || nodeList.getLength()!=1){
            throw new XmlValidatorException("can't find single 'process' element ");
        }
        return nodeList.item(0);
    }

    public static Node getNode(Document document, String path){
        XPath xpath = XPathFactory.newInstance().newXPath();
        try {
            return (Node)xpath.evaluate(path, document, XPathConstants.NODE);
        } catch (XPathExpressionException e) {
            return null;
        }
    }

    public static NodeList getNodeList(Document document, String path){
        XPath xpath = XPathFactory.newInstance().newXPath();
        try {
            return (NodeList)xpath.evaluate(path, document, XPathConstants.NODESET);
        } catch (XPathExpressionException e) {
            return null;
        }
    }


    public static void validateUserTask(Element node) {
        if(node.getAttribute("activiti:candidateGroups")==null){
            throw new XmlValidatorException("for task "+node.getAttribute("name")+" can't find candidateGroups");
        }
        if(node.getAttribute("activiti:formKey")==null){
            throw new XmlValidatorException("for task "+node.getAttribute("name")+" can't find formKey");
        }

        NodeList extensionNode = node.getElementsByTagName("extensionElements");
        if(extensionNode.getLength()==0){
            throw new XmlValidatorException("for task "+node.getAttribute("name")+" extensionElements not found");
        }
        if(XmlValidator.getChildNodeByAttribute(extensionNode.item(0), "event","create")==null){
            throw new XmlValidatorException("for task "+node.getAttribute("name")+" can't find tasklistener for 'create' event ");
        }
        if(XmlValidator.getChildNodeByAttribute(extensionNode.item(0), "event","complete")==null){
            throw new XmlValidatorException("for task "+node.getAttribute("name")+" can't find tasklistener for 'complete' event ");
        }
    }

    public static void validateProcess(Element node){
        NodeList extensionNode = node.getElementsByTagName("extensionElements");
        if(extensionNode.getLength()==0){
            throw new XmlValidatorException("for process "+node.getAttribute("name")+" extensionElements not found");
        }
        if(XmlValidator.getChildNodeByAttribute(extensionNode.item(0), "event","start")==null){
            throw new XmlValidatorException("for process can't find processlistener for 'start' event ");
        }
        if(XmlValidator.getChildNodeByAttribute(extensionNode.item(0), "event","end")==null){
            throw new XmlValidatorException("for process can't find processlistener for 'end' event ");
        }
    }

    private static Node getChildNodeByAttribute(Node node, String event, String create) {
        NodeList nodes = node.getChildNodes();
        if(nodes==null || nodes.getLength()==0){
            return null;
        }
        for(int index=0;index<nodes.getLength();index++){
            if(!(nodes.item(index) instanceof Element)){
                continue;
            }
            Element currentElement = (Element)nodes.item(index);
            if(currentElement.getAttributes().getNamedItem(event)==null){
                continue;
            }
            if(currentElement.getAttributes().getNamedItem(event).getTextContent().equals(create)){
                return nodes.item(index);
            }
        }
        return null;
    }

}
