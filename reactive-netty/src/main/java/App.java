import io.netty.buffer.ByteBuf;
import io.netty.handler.codec.http.DefaultFullHttpResponse;
import io.netty.handler.codec.http.HttpMessage;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.codec.http.HttpVersion;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.server.HandlerFunction;
import org.springframework.web.reactive.function.server.ServerResponse;
import reactor.core.publisher.Mono;
import reactor.ipc.netty.NettyContext;
import reactor.ipc.netty.http.server.HttpServer;
import reactor.ipc.netty.http.server.HttpServerRequest;
import reactor.ipc.netty.http.server.HttpServerResponse;
import reactor.ipc.netty.http.server.HttpServerRoutes;

import java.util.Observable;
import java.util.function.BiFunction;
import java.util.function.Consumer;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String startServer() throws InterruptedException {
//        HttpServer server = HttpServer.create(9090);

//
//        HandlerFunction folderHandler = request ->
//            ServerResponse
//                    .ok()
//                    .contentType(MediaType.APPLICATION_JSON)
//                    .body(BodyInserters.fromObject("information for folder:"+request.queryParam("folder")));
//
//        server.newHandler();
//        server.startRouterAndAwait((consumer)->
//                        consumer.get("/info/{folder}",
//                                (HttpServerRequest request, HttpServerResponse response) ->{
//                                    return (Publisher<Void>) s -> {
//                                        response.status(200);
//                                        // response.sendObject("this is response");
//                                        // s.onComplete();
//                                        response.sendString(s1 -> s1.onNext("done."));
//                                        response.then();
//                                    };
//                                })
//        );
        return "server is starting...";

    }

    public static void main(String[] args) throws InterruptedException {
        HttpServer<ByteBuf, ByteBuf> server;

        server = HttpServer.newServer()
                .start((req, resp) ->
                        resp.writeString(just("Hello World!"))
                );
        HttpServer server = HttpServer.create(9090);
        server.startAndAwait(new BiFunction<HttpServerRequest, HttpServerResponse, Publisher<Void>>() {
            @Override
            public Publisher<Void> apply(HttpServerRequest httpServerRequest, HttpServerResponse httpServerResponse) {
                // httpServerResponse.status(201);
                // httpServerResponse.sendObject("this is new object");
                // httpServerResponse.sendRedirect("google.com.ua");
                // httpServerResponse.context().channel().writeAndFlush("this is new object");
                return ;
            }
        });
    }
}
